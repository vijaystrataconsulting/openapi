// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	echo "github.com/labstack/echo/v4"
)

// CreateWorkbenchJSONBody defines parameters for CreateWorkbench.
type CreateWorkbenchJSONBody struct {
	Chart  *string                 `json:"chart,omitempty"`
	Name   string                  `json:"name"`
	Values *map[string]interface{} `json:"values,omitempty"`
}

// PostDeleteJSONBody defines parameters for PostDelete.
type PostDeleteJSONBody interface{}

// GetWorkbenchStatusJSONBody defines parameters for GetWorkbenchStatus.
type GetWorkbenchStatusJSONBody interface{}

// CreateWorkbenchJSONRequestBody defines body for CreateWorkbench for application/json ContentType.
type CreateWorkbenchJSONRequestBody CreateWorkbenchJSONBody

// PostDeleteJSONRequestBody defines body for PostDelete for application/json ContentType.
type PostDeleteJSONRequestBody PostDeleteJSONBody

// GetWorkbenchStatusJSONRequestBody defines body for GetWorkbenchStatus for application/json ContentType.
type GetWorkbenchStatusJSONRequestBody GetWorkbenchStatusJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create a new workbench
	// (POST /create)
	CreateWorkbench(ctx echo.Context) error

	// (POST /delete)
	PostDelete(ctx echo.Context) error

	// (GET /list)
	ListWorkbenches(ctx echo.Context) error

	// (GET /live)
	WorkspaceLiveness(ctx echo.Context) error

	// (GET /ready)
	WorkspaceReadiness(ctx echo.Context) error

	// (POST /status)
	GetWorkbenchStatus(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// CreateWorkbench converts echo context to params.
func (w *ServerInterfaceWrapper) CreateWorkbench(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateWorkbench(ctx)
	return err
}

// PostDelete converts echo context to params.
func (w *ServerInterfaceWrapper) PostDelete(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDelete(ctx)
	return err
}

// ListWorkbenches converts echo context to params.
func (w *ServerInterfaceWrapper) ListWorkbenches(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListWorkbenches(ctx)
	return err
}

// WorkspaceLiveness converts echo context to params.
func (w *ServerInterfaceWrapper) WorkspaceLiveness(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WorkspaceLiveness(ctx)
	return err
}

// WorkspaceReadiness converts echo context to params.
func (w *ServerInterfaceWrapper) WorkspaceReadiness(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WorkspaceReadiness(ctx)
	return err
}

// GetWorkbenchStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetWorkbenchStatus(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetWorkbenchStatus(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/create", wrapper.CreateWorkbench)
	router.POST(baseURL+"/delete", wrapper.PostDelete)
	router.GET(baseURL+"/list", wrapper.ListWorkbenches)
	router.GET(baseURL+"/live", wrapper.WorkspaceLiveness)
	router.GET(baseURL+"/ready", wrapper.WorkspaceReadiness)
	router.POST(baseURL+"/status", wrapper.GetWorkbenchStatus)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8yWT2/bPAzGv4pAvEfDTt/dfOu6oSjQQ7Adehh2UBU60SZLGkmnDYJ890FW/rr11q3F",
	"2pMD8zH58CfG9BpMaGPw6IWhXm8KsL4JUK9hhmzIRrHBQw3n0yvFEY1trNHpnmoCqUhhadkGj6QYaWkN",
	"QgFixSHUMD2Knk+voIAlEud8Z+VZOYFNASGi19FCDe/KSTmBAqKWRfIClSHUgulnDCzpGiJSX/5qBjVc",
	"9PGbQN9v0ZsFFED4o0OW92G2SvL/CBuooSyrqEm3KEi8zbp/qlzp1iUnhByDZ+xr/z+ZpIsJXtD3pXWM",
	"btt79Y1TE2tgs8BWn1bap6mGJTabYkD1bqdQ2dRMcWcMMjedcyvo9Y3unPyll3yPq49EgUZddB7vI5pU",
	"HpMQkoS7ttW02lNWWnm8U3vHvaiaocPTEzpNneNKHz1XDA5xGlg+5DQPzu8ZLefKF8E3dj7aeQ53dJjo",
	"reHDwWjTa4eus244epZwBrVQh689T9s+3sg49bPibJ6QOT4yKCmotHMH8sgPoF9blpuT+LMYW8GWnwq7",
	"AFnF9FbTRHr1WN99C8f2X533Ekd5X2L2ylEbVEnqkR8Sv9lJrg+K3zAXvJcqOm0HbW3xsZD187HhzXYs",
	"945eGyChzq+hJxBMWvtrhJ+OJP+EYfY/CnGsyEvhY9HS8fhuIBSyuDx+2W4fGSK8xMPf/vNO8nKrIqf8",
	"41UxR3lsT7ytPZCJqh3r2dvZCOkbAyl9EUL9ZQ0dOahhIRK5rqqjD8vytuWShbRoEzx3TqyflzbA5uvm",
	"ZwAAAP//MjefCL4KAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
